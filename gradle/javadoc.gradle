afterEvaluate {
    def variants = plugins.hasPlugin('com.android.application') ?
            android.applicationVariants : android.libraryVariants

    variants.each { variant ->

        def variantName = variant.name.capitalize()

        if (variantName.contains("Debug")) {
            return;
        }

        task("generateJavadoc${variantName}", type: Javadoc) {
            description "Generates Javadoc for ${variantName}"
            source = variant.javaCompile.source
            ext.androidJar =
                    "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");
            options.charSet("utf-8")
            options.showFromPublic()
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude '**/Secret.java' //This file is contains accessToke value.
        }

    }

}